{"version":3,"sources":["Components/RoboFriendCard.js","Components/Scroll.js","Components/SearchBox.js","Components/Header.js","Components/RoboFriends.js","actions/getRoboFrends.js","contstans/RobotsContasts.js","actions/searchBoxAction.js","contstans/searchBoxConstants.js","App.js","reportWebVitals.js","store/store.js","reducers/searchBoxReducer.js","reducers/roboFriendsReducer.js","index.js"],"names":["RoboFriendCard","id","username","name","email","random","className","src","alt","Scroll","children","style","overflowY","border","height","SearchBox","onSearchChange","type","onChange","placeholder","memo","RoboFriends","useState","setRandom","dispatch","useDispatch","searchField","useSelector","state","robotsData","robots","loading","useEffect","length","a","axios","get","data","payload","error","message","filteredRobots","filter","robot","toLowerCase","includes","onClick","rand","Math","floor","e","text","target","value","textAlign","fontSize","color","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","Object","assign","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4308a91.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction RoboFriendCard({ id, username, name, email, random }) {\r\n  return (\r\n    <div className=\"robofriends_card\">\r\n      <img src={`https://robohash.org/${random}${id}`} alt={username} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoboFriendCard;\r\n","import React from \"react\";\r\n\r\nfunction Scroll({ children }) {\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"500px\" }}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nfunction SearchBox({ onSearchChange }) {\r\n  return (\r\n    <div className=\"searchBox\">\r\n      <input type=\"text\" onChange={onSearchChange} placeholder=\"search robots...\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { memo } from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h1>robofirends</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RoboFriendCard from \"./RoboFriendCard\";\r\nimport Scroll from \"./Scroll\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { searchBoxAction } from \"../actions/searchBoxAction\";\r\nimport { fetchRoboFriends } from \"../actions/getRoboFrends\";\r\nimport Header from \"./Header\";\r\n\r\nfunction RoboFriends() {\r\n  const [random, setRandom] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const searchFieldFromState = useSelector((state) => state.searchField);\r\n  const { searchField } = searchFieldFromState;\r\n\r\n  const robotsData = useSelector((state) => state.robotsData);\r\n  const { robots, loading } = robotsData;\r\n\r\n  const randomRobots = () => {\r\n    let rand = Math.floor(Math.random() * robots.length) + 1;\r\n    setRandom(rand);\r\n  };\r\n\r\n  const onSearchChange = (e) => {\r\n    dispatch(searchBoxAction(e.target.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!robots.length) {\r\n      dispatch(fetchRoboFriends());\r\n    }\r\n  }, [dispatch, robots.length]);\r\n\r\n  const filteredRobots = robots.filter(\r\n    (robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase()) ||\r\n      robot.email.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <button onClick={randomRobots}>Click To Get Random Robots</button>\r\n      <SearchBox onSearchChange={onSearchChange} />\r\n      {loading ? (\r\n        <p style={{ textAlign: \"center\", fontSize: \"50px\", color: \"#ffffff\" }}>Loading...</p>\r\n      ) : (\r\n        <Scroll>\r\n          <div className=\"robofriends\">\r\n            {robots.length &&\r\n              filteredRobots.map((robot) => (\r\n                <RoboFriendCard key={robot.id} {...robot} random={random} />\r\n              ))}\r\n          </div>\r\n        </Scroll>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoboFriends;\r\n","import axios from \"axios\";\r\nimport {\r\n  ROBOFRIENDS_REQUEST,\r\n  ROBOFRIENDS_REQUEST_SUCCESS,\r\n  ROBOFRIENDS_REQUEST_FAIL,\r\n} from \"../contstans/RobotsContasts\";\r\n\r\nexport const fetchRoboFriends = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: ROBOFRIENDS_REQUEST,\r\n    });\r\n\r\n    const { data } = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n\r\n    dispatch({\r\n      type: ROBOFRIENDS_REQUEST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ROBOFRIENDS_REQUEST_FAIL,\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n","export const ROBOFRIENDS_REQUEST = \"ROBOFRIENDS_REQUEST\";\r\nexport const ROBOFRIENDS_REQUEST_SUCCESS = \"ROBOFRIENDS_REQUEST_SUCCESS\";\r\nexport const ROBOFRIENDS_REQUEST_FAIL = \"ROBOFRIENDS_REQUEST_FAIL\";\r\n","import { CHANGE_SEARCH_FIELD } from \"../contstans/searchBoxConstants\";\r\n\r\nexport const searchBoxAction = (text) => (dispatch) => {\r\n  dispatch({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n  });\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n","import RoboFriends from \"./Components/RoboFriends\";\nimport React, { memo } from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RoboFriends />\n    </div>\n  );\n}\n\nexport default memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport { roboFriendsReducer } from \"../reducers/roboFriendsReducer\";\r\nimport { searchRobots } from \"../reducers/searchBoxReducer\";\r\n\r\nconst reducers = combineReducers({\r\n  searchField: searchRobots,\r\n  robotsData: roboFriendsReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n","import { CHANGE_SEARCH_FIELD } from \"../contstans/searchBoxConstants\";\r\n\r\nexport const searchRobots = (state = { searchField: \"\" }, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  ROBOFRIENDS_REQUEST,\r\n  ROBOFRIENDS_REQUEST_FAIL,\r\n  ROBOFRIENDS_REQUEST_SUCCESS,\r\n} from \"../contstans/RobotsContasts\";\r\n\r\nexport const roboFriendsReducer = (state = { robots: [] }, action) => {\r\n  switch (action.type) {\r\n    case ROBOFRIENDS_REQUEST:\r\n      return Object.assign({}, state, { loading: true });\r\n    case ROBOFRIENDS_REQUEST_SUCCESS:\r\n      return Object.assign({}, state, { loading: false, robots: action.payload });\r\n    case ROBOFRIENDS_REQUEST_FAIL:\r\n      return Object.assign({}, state, { loading: false, error: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}